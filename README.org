#+title: My Emacs configuration
#+options: toc:nil

* Early init

Here I set some variables that influence the startup process.
This both about performance but also about seeing defaults I don't end up using.
E.g. I don't want a white background to blink on startup because I use a dark theme.

Emacs will run without the early-init but will have some vanilla default modes.

* Theme

I don't use a theme package.
I simply change faces if I don't like them.

I use (set-face-attribute...) because (custom-set-faces...) is hard to change for packages I might load in the future (red text is hard to read on a red background).
I don't like or use custom.el.

I restrict myself to use 8 dark theme colors.
Examples of their use are:
| Color | Use            |   | Color | Use            |   | Color | Use             |
|-------+----------------+---+-------+----------------+---+-------+-----------------|
| #bba  | default text   |   | #5af  | link/timestamp |   | #5fa  | comment/tags    |
| #432  | shadow/hl-line |   | #af5  | success/done   |   | #fa5  | warning/heading |
| #221  | background     |   | #f5a  | error/todo     |   | #a5f  | not used        |
|-------+----------------+---+-------+----------------+---+-------+-----------------|
Unspecified faces are handled by the vanilla theme.

When I configure evil I add 8 colors reserved for the cursor.
I tax the eyes a bit with extreme colors to help keeping track of the evil state and cursor placement.
| Color | State    |   | Color | State   |   | Color | State  |
|-------+----------+---+-------+---------+---+-------+--------|
| #f00  | Operator |   | #0ff  | Emacs   |   | #fff  | Visual |
| #0f0  | Normal   |   | #f0f  | Replace |   | #000  | Region |
| #00f  | Motion   |   | #ff0  | Insert  |   |       |        |
|-------+----------+---+-------+---------+---+-------+--------|
Operator state is red to alert.
Normal state has the opposite green color.
Insert state is the last trafic light color (yellow) and use a bar.
Replace state has the opposite color of insert state and use an hbar.
Emacs and motion states have the remaining rgb colors.

"Input" states have the "brighter" colors (with 2 f's) and bars in common.
The visual state is hollow and might be filled with the region color.

* Other vanilla stuff

Here I set variables that are used by vanilla Emacs or a native package.
I also activate a few global minor modes and add some hooks.

* Modeline

I don't use a package for my modeline.
It consist of a window number, information about writable/modified status, the buffer name and the major mode.

The active window have some more information.
The information is git status and whether the buffer is narrowed.
Besides that the active window have the relative vertical position and column number after a gap.

Prot has a Youtube video on how to make your own modeline: [[https://www.youtube.com/watch?v=Qf_DLPIA9Cs][Emacs: write custom mode line]].

* Custom functions

I keep these functions very simple.
Emacs usually provide what I need without me having to write a function.

I have a few functions that simply open some key files with find-file.
Then I have one to open my custom agenda and one does my idea capture.
Last I code some window manipulation, a git stage/commit and a save/quit without a prompt.

* Package.el

I use package.el and (require 'xyz) to install and load packages.
I used to use use-package but that seem to increase the number of garbage collections significantly (about 5 fold for me).
It is not clear to me that gains from controlling when to load packages (:defer) is worth this cost.

I think deferring also makes little sense combined with Emacs server/client.
If I was bothered by a slow startup time I would make a daemon on boot and use emacsclient.
With that setup use-package's defers might hurt performance if everything is not loaded in the daemon.

Deferring can also make debugging harder.
You might have to ask yourself is or isn't this or that loaded, when did it happen and is that what is causing the problem right now?
It's easier and cleaner to just have everything loaded.

Use-package/straight also have some other advantages like updating packages directly from a git repo, but I don't use that.
I preserve some of the structure that is also a feature of use-package.
That means that I will set variables associated with a package just before I require it.
This would typically be part of an :init or :custom section in use-package.
Hooks (:hook or :config) and mode activations (:init?! or :config) I do right after require.
I do keybindings (:bind or :command) and faces (:custom-face) at the end of the configuration in dedicated sections.

All this should make it fairly easy to convert my config to use use-package or straight.

** Honorable mentions

I will only comment on the 3 packages evil, org and general.
Honorable mentions are vertico, corfu, ace-window, recursive-narrow and magit but I use many more.

* Evil.el

Evil has become the foundation of my use of Emacs.

** Layered versus modal bindings

Emacs comes with a complex but very powerful set of /layered/ keybindings (using =<ctrl>=, =<meta>=, =<shift>= or combinations of these).
An alternative is the evil package with Vim's /modal/ keybindings combined with some layering.
I prefer modal bindings and try to minimize the use of layers.

** Cursor model (my sacrilege)

Besides the modal approach Vim has a unique cursor model.
When in insert state it works with the standard cursor between characters approach that all other editors use.
In normal state this model is changed to something no other editor I know have picked up on.
The cursor is considered on characters rather than between them.

I chose to use a modification of evil where the cursor is between characters in normal state.
This has the advantage of fewer keys being used (e.g. no need for =a=) at little to no cost in efficiency.

You might want to rebind some keys but with few exceptions I just leave the evil bindings be.
I do swap the two paste bindings =p= and =P= to avoid using the capitalized one.

** Two ways of pasting

I will try to illustrate the efficiency with a case study on pasting.
Vim's cursor on character model requires two ways of pasting.
One is layered with =<shift>= and really counts as two keystrokes.
You can mimic this behavior by using a "correction-motion" before paste in the cursor between characters model.
This means that from a strict efficiency perspective it is not clear what is gained from two paste commands.

This does not mean that Vim's way of doing things is inferior.
You should minimize "correction-motions", so you can go directly for Vim's "verb" -> "noun" approach as often as you can.
On the other hand you end up with the more complex two commands where only one is really necessary.
The complex keybindings will only be an advantage to a power user.
As you get used to the less complex bindings you will develop foresight to use less "correction-motions".

** Casual use

As a more casual or inexperienced user, one paste command is preferable.
My configuration can work as a great introduction to evil keybindings.

The cursor model in normal state will be more consistent both with it's insert state but also with other programs.
If you dislike layers and try to minimize their use, you gain a lot from not needing capitalized bindings.
I very much dislike holding down two keys at once just as if I were using vanilla Emacs (take that, Vim out of the box lovers).

In my configuration the between characters behavior is isolated in evil-cursor-model.el, which I have slightly modified compared to [[https://www.dr-qubit.org/Evil_cursor_model.html][the author's original version]].
Standard evil behavior is easy to achieve by simply not loading that file.

* Org.el

I customize this native package with a large set of variables.
I extend it with a few external packages, the native prettify.el and a few hooks.

** Org-agenda

I restrict myself to the 4 todo-states NEXT, TODO, HOLD and DONE.
HOLD is an inactive state that can be translated to "pending third party action".
The other states are self explanatory.
Some might want a canceled state, but I cancel items by archiving them in an active state.

Besides the states I use refile and an unrestricted number of categories for todo items.
When I have a project I introduce a new category with a capture.

I configure my custom agenda to have 4 sections:

1. I have a potentially empty section without a headline where I display my NEXT items.
   When I capture ideas they will go in my inbox as a NEXT item.
   NEXT items are unblocked tasks that take less than 5 minutes meant to be handled asap.
   Organizing an item into my agenda is such a task.
2. After this I display this week's agenda with active todo-state items that have an active timestamp.
   Items from the first section can potentially be repeated here if they are timestamped.
3. Not all TODO items have or even should have a timestamp.
   In this section I pile up items that have not been dealt a time slot yet.
   Some will never have a time slot like e.g. a project with multiple tasks associated.
   I can follow the progress of subtasks here with a cookie.
   Last I also display items on HOLD in this section.
4. The final section like the first is usually empty.
   This is where I can append a search or whatever the agenda menu offers.
The main two capture templates is a simple idea capture and an item with a category that I can refile to.
That is all I need for my agenda.

* General.el

As with my theme and modeline I could and perhaps should do my leader key keybindings with "-maps", but I'm not there yet.
Prot has a nice Youtube video about it: [[https://www.youtube.com/watch?v=gojOZ3k1mmk][Emacs: define prefix/leader key]].

For now I use general.el to handle my leader keybindings.
Inspired by Spacemacs I use =<SPC>= as my leader key and part of the structure in my leader keybindings are also inspired by this project.

* Package faces

Here I specify faces used by packages.
I typically use (with-eval-after-load...) and this can be used to identify in what package the face was introduced.
I don't (defface...) any faces myself.

* Keybindings

I like to have my keybindings in a section rather than distributed out among my packages.
I find it more useful to spot collisions by gathering these bindings in one place.
Use-package might be able to defer stuff based on :bind but I don't use use-package.

A few evil bindings specific to the change in cursor model are rebound inside evil-cursor-model.el.

* Youtube videos

I have made a few Youtube videos on this configuration:

#+begin_center
[[https://www.youtube.com/watch?v=Ey0sRfGyERg][I Install my Emacs configuration]]
#+end_center

#+begin_center
[[https://www.youtube.com/watch?v=L9aGgAt6Hd8][A tour of my Emacs init files]]
#+end_center

#+begin_center
[[https://www.youtube.com/watch?v=5ziOMpT4EwE][My Emacs org-agenda and capture setup]]
#+end_center

* Clone

If you have an /empty/ ~/.emacs.d directory and have git installed you can clone this configuration with:
#+begin_src bash
  git clone https://github.com/maxfriis/my-emacs-config ~/.emacs.d
#+end_src
After that you simply start emacs and it should install all the packages, load them and create a minimal directory structure for org-agenda.
The only thing left is to install nerd fonts (nerd-icons-install-fonts) and restart.
